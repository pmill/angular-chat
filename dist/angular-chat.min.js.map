{"version":3,"sources":["module.js","directives/lobby.js","services/chatroom.js","services/socket.js","templates.js"],"names":["angular","module","Directive","restrict","scope","user","templateUrl","replace","controller","Controller","controllerAs","bindToController","$scope","ChatRoomService","activate","connectToRoom","vm","data","lobbyName","then","sendUserConnected","onUserConnected","userDetailsReceived","onUserDisconnected","userDisconnected","onUserDetailsReceived","onRoomCreated","roomCreated","userDetails","users","id","state","loading","$apply","roomName","rooms","push","this","directive","$inject","Service","$window","SocketService","channel","currentUser","onbeforeunload","send","connect","subscribe","sendMessage","message","sendUserDetails","callback","on","onMessageReceived","onUserConnectedCallback","startChatWithUser","userId","createRoomChannelName","userIds","sort","hashCode","join","s","split","reduce","a","b","charCodeAt","factory","$q","socketConfig","client","ScaleDrone","channelId","resolve","reject","error","onDisconnect","console","log","eventName","room","event","payload","publish","run","$templateCache","put"],"mappings":"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","file":"angular-chat.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat', []);\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .directive('pmChatLobby', Directive);\n\n  function Directive() {\n    return {\n      restrict: 'E',\n      scope: {\n        user: '='\n      },\n      templateUrl: 'lobby.html',\n      replace: true,\n      controller: Controller,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  Controller.$inject = ['$scope', 'ChatRoomService'];\n\n  function Controller($scope, ChatRoomService) {\n    var vm = this;\n\n    vm.data = {\n      lobbyName: 'public-chat-users',\n      users: {},\n      rooms: [],\n      user: vm.user\n    };\n\n    vm.state = {\n      loading: true\n    };\n\n    activate();\n\n    function activate() {\n      ChatRoomService.connectToRoom(vm.data.lobbyName, vm.user).then(function() {\n        ChatRoomService.sendUserConnected();\n        ChatRoomService.onUserConnected(userDetailsReceived);\n        ChatRoomService.onUserDisconnected(userDisconnected);\n        ChatRoomService.onUserDetailsReceived(userDetailsReceived);\n        ChatRoomService.onRoomCreated(roomCreated);\n      });\n    }\n\n    function userDisconnected(userDetails) {\n      delete vm.data.users[userDetails.id];\n    }\n\n    function userDetailsReceived(userDetails) {\n      if (userDetails.id !== vm.data.user.id) {\n        vm.data.users[userDetails.id] = userDetails;\n        vm.state.loading = false;\n        $scope.$apply();\n      }\n    }\n\n    function roomCreated(roomName) {\n      vm.data.rooms.push(roomName);\n      $scope.$apply();\n    }\n  }\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .factory('ChatRoomService', Service);\n\n  Service.$inject = ['$window', 'SocketService'];\n\n  function Service($window, SocketService) {\n    var currentUser = null;\n    var roomName = null;\n\n    return {\n      connectToRoom: connectToRoom,\n      onRoomCreated: onRoomCreated,\n      onMessageReceived: onMessageReceived,\n      onUserDetailsReceived: onUserDetailsReceived,\n      onUserConnected: onUserConnected,\n      onUserDisconnected: onUserDisconnected,\n      sendMessage: sendMessage,\n      sendUserConnected: sendUserConnected,\n      sendUserDetails: sendUserDetails,\n      startChatWithUser: startChatWithUser\n    };\n\n    function connectToRoom(channel, userDetails) {\n      roomName = channel;\n      currentUser = userDetails;\n\n      $window.onbeforeunload = function () {\n        SocketService.send(roomName, 'user.disconnected', currentUser);\n      };\n\n      return SocketService.connect().then(function() {\n        return SocketService.subscribe(roomName);\n      });\n    }\n\n    function sendMessage(message) {\n      return SocketService.send(roomName, 'message.received', message);\n    }\n\n    function sendUserConnected() {\n      return SocketService.send(roomName, 'user.connected', currentUser);\n    }\n\n    function sendUserDetails() {\n      return SocketService.send(roomName, 'user.details', currentUser);\n    }\n\n    function onRoomCreated(callback) {\n      return SocketService.on(roomName, 'room.created', callback);\n    }\n\n    function onMessageReceived(callback) {\n      return SocketService.on(roomName, 'message.received', callback);\n    }\n\n    function onUserConnected(callback) {\n      return SocketService.on(roomName, 'user.connected', onUserConnectedCallback);\n\n      function onUserConnectedCallback(userDetails) {\n        sendUserDetails(currentUser);\n        callback(userDetails)\n      }\n    }\n\n    function onUserDisconnected(callback) {\n      return SocketService.on(roomName, 'user.disconnected', callback);\n    }\n\n    function onUserDetailsReceived(callback) {\n      return SocketService.on(roomName, 'user.details', callback);\n    }\n\n    function startChatWithUser(userId) {\n      if (userId === currentUser.id) {\n        throw \"Can't start a chat with yourself!\";\n      }\n\n      var roomName = createRoomChannelName([currentUser.id, userId]);\n      connectToRoom(roomName).then(function() {\n        return SocketService.send(roomName, 'room.created', roomName);\n      });\n    }\n\n    function createRoomChannelName(userIds) {\n      userIds = userIds.sort();\n      return 'private-chat-room-' + hashCode(userIds.join('|'));\n    }\n\n    function hashCode(s){\n      return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n    }\n  }\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .factory('SocketService', Service);\n\n  Service.$inject = ['$q', 'socketConfig'];\n\n  function Service($q, socketConfig) {\n    var client;\n    var rooms = {};\n\n    return {\n      connect: connect,\n      on: on,\n      onDisconnect: onDisconnect,\n      room: room,\n      send: send,\n      subscribe: subscribe\n    };\n\n    function connect() {\n      client = new ScaleDrone(socketConfig.channelId);\n\n      return $q(function(resolve, reject) {\n        client.on('open', function (error) {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve();\n        });\n      });\n    }\n\n    function onDisconnect() {\n      return $q(function(resolve, reject) {\n        client.on('close', function () {\n          console.log('close()');\n          resolve();\n        });\n      });\n    }\n\n    function on(roomName, eventName, callback) {\n      console.log('subscribing to event', roomName, eventName);\n      room(roomName).on('data', function (data) {\n        if (data.event == eventName) {\n          console.log('processing message', roomName, eventName, data);\n          callback(data.payload);\n        }\n      });\n    }\n\n    function send(roomName, eventName, payload) {\n      console.log('sending message', roomName, eventName, payload);\n      client.publish({\n        room: roomName,\n        message: {\n          event: eventName,\n          payload: payload\n        }\n      });\n    }\n\n    function subscribe(roomName) {\n      return $q(function(resolve, reject) {\n        rooms[roomName] = client.subscribe(roomName);\n\n        rooms[roomName].on('open', function (error) {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve();\n        });\n      });\n    }\n\n    function room(roomName) {\n      return rooms[roomName];\n    }\n  }\n})();","(function(){angular.module(\"angular-chat\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"lobby.html\",\"<div class=\\\"row\\\">\\n    <div class=\\\"col-md-4 col-xs-12\\\">\\n        <div class=\\\"panel panel-default\\\">\\n            <div class=\\\"panel-heading\\\">\\n                <h3 class=\\\"panel-title\\\"><span class=\\\"fa fa-users\\\"></span> Lobby</h3>\\n            </div>\\n\\n            <div class=\\\"list-group\\\">\\n                <button class=\\\"list-group-item\\\" ng-repeat=\\\"u in vm.data.users\\\" ng-if=\\\"!vm.state.loading\\\">\\n                    <h4 class=\\\"list-group-item-heading\\\">\\n                        <span class=\\\"fa fa-user\\\"></span> {{u.name}}\\n                    </h4>\\n                </button>\\n                <span class=\\\"list-group-item\\\" ng-if=\\\"vm.state.loading\\\">\\n                    <h4 class=\\\"list-group-item-heading\\\">\\n                        <i class=\\\"fa fa-cog fa-spin fa-fw margin-bottom\\\"></i>\\n                        loading...\\n                    </h4>\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"col-md-8\\\">\\n        <div class=\\\"panel panel-default\\\">\\n            <div class=\\\"panel-heading\\\">\\n                <h3 class=\\\"panel-title\\\"><span class=\\\"fa fa-comment-o\\\"></span> Room</h3>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\");}]);})();"],"sourceRoot":"/source/"}