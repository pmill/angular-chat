{"version":3,"sources":["module.js","services/chatroom.js","services/socket.js","directives/lobby.js","templates.js"],"names":["angular","module","Service","SocketService","connectToRoom","channel","userDetails","roomName","currentUser","connect","then","subscribe","sendMessage","message","send","sendUserConnected","sendUserDetails","console","log","onRoomCreated","callback","on","onMessageReceived","onUserJoined","onUserDetailsReceived","startChatWithUser","userId","id","createRoomChannelName","userIds","sort","hashCode","join","s","split","reduce","a","b","charCodeAt","factory","$inject","$q","socketConfig","client","ScaleDrone","channelId","resolve","reject","error","eventName","room","data","event","payload","publish","rooms","Directive","restrict","scope","user","templateUrl","replace","controller","Controller","controllerAs","bindToController","$scope","ChatRoomService","activate","vm","lobbyName","userDetailsReceived","roomCreated","users","$apply","push","this","directive","run","$templateCache","put"],"mappings":"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","file":"angular-chat.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat', []);\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .factory('ChatRoomService', Service);\n\n  Service.$inject = ['SocketService'];\n\n  function Service(SocketService) {\n    var currentUser = null;\n    var roomName = null;\n\n    return {\n      connectToRoom: connectToRoom,\n      onRoomCreated: onRoomCreated,\n      onMessageReceived: onMessageReceived,\n      onUserDetailsReceived: onUserDetailsReceived,\n      onUserJoined: onUserJoined,\n      sendMessage: sendMessage,\n      sendUserConnected: sendUserConnected,\n      sendUserDetails: sendUserDetails,\n      startChatWithUser: startChatWithUser\n    };\n\n    function connectToRoom(channel, userDetails) {\n      roomName = channel;\n      currentUser = userDetails;\n\n      return SocketService.connect().then(function() {\n        return SocketService.subscribe(roomName);\n      });\n    }\n\n    function sendMessage(message) {\n      return SocketService.send(roomName, 'message.received', message);\n    }\n\n    function sendUserConnected() {\n      return SocketService.send(roomName, 'user.connected', currentUser);\n    }\n\n    function sendUserDetails() {\n      console.log('sendUserDetails');\n      return SocketService.send(roomName, 'user.details', currentUser);\n    }\n\n    function onRoomCreated(callback) {\n      return SocketService.on(roomName, 'room.created', callback);\n    }\n\n    function onMessageReceived(callback) {\n      return SocketService.on(roomName, 'message.received', callback);\n    }\n\n    function onUserJoined(callback) {\n      return SocketService.on(roomName, 'user.connected', callback).then(function() {\n        console.log('onUserJoined');\n        sendUserDetails(currentUser);\n      });\n    }\n\n    function onUserDetailsReceived(callback) {\n      return SocketService.on(roomName, 'user.details', callback);\n    }\n\n    function startChatWithUser(userId) {\n      if (userId === currentUser.id) {\n        throw \"Can't start a chat with yourself!\";\n      }\n\n      var roomName = createRoomChannelName([currentUser.id, userId]);\n      connectToRoom(roomName).then(function() {\n        return SocketService.send(roomName, 'chat.created', roomName);\n      });\n    }\n\n    function createRoomChannelName(userIds) {\n      userIds = userIds.sort();\n      return 'private-chat-room-' + hashCode(userIds.join('|'));\n    }\n\n    function hashCode(s){\n      return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n    }\n  }\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .factory('SocketService', Service);\n\n  Service.$inject = ['$q', 'socketConfig'];\n\n  function Service($q, socketConfig) {\n    var client;\n    var rooms = {};\n\n    return {\n      connect: connect,\n      on: on,\n      room: room,\n      send: send,\n      subscribe: subscribe\n    };\n\n    function connect() {\n      client = new ScaleDrone(socketConfig.channelId);\n\n      return $q(function(resolve, reject) {\n        client.on('open', function (error) {\n          console.log('open');\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve();\n        });\n      });\n    }\n\n    function on(roomName, eventName, callback) {\n      return $q(function(resolve, reject) {\n        room(roomName).on('data', function (data) {\n          if (data.event == eventName) {\n            callback(data.payload);\n            return resolve(data.payload);\n          }\n        });\n      });\n    }\n\n    function send(roomName, eventName, payload) {\n      console.log('sending message', roomName, eventName, payload);\n      client.publish({\n        room: roomName,\n        message: {\n          event: eventName,\n          payload: payload\n        }\n      });\n    }\n\n    function subscribe(roomName) {\n      return $q(function(resolve, reject) {\n        rooms[roomName] = client.subscribe(roomName);\n\n        rooms[roomName].on('open', function (error) {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve();\n        });\n      });\n    }\n\n    function room(roomName) {\n      return rooms[roomName];\n    }\n  };\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .directive('pmChatLobby', Directive);\n\n  function Directive() {\n    return {\n      restrict: 'E',\n      scope: {\n        user: '='\n      },\n      templateUrl: 'lobby.html',\n      replace: true,\n      controller: Controller,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  Controller.$inject = ['$scope', 'ChatRoomService'];\n\n  function Controller($scope, ChatRoomService) {\n    var vm = this;\n\n    vm.data = {\n      lobbyName: 'public-chat-users',\n      users: {},\n      rooms: [],\n      user: vm.user\n    };\n\n\n\n    activate();\n\n    function activate() {\n      ChatRoomService.connectToRoom(vm.data.lobbyName, vm.user).then(function() {\n        ChatRoomService.sendUserConnected();\n        ChatRoomService.onUserJoined(userDetailsReceived);\n        ChatRoomService.onUserDetailsReceived(userDetailsReceived);\n        ChatRoomService.onRoomCreated(roomCreated);\n      });\n    }\n\n    function userDetailsReceived(userDetails) {\n      if (userDetails.id !== vm.data.user.id) {\n        vm.data.users[userDetails.id] = userDetails;\n        $scope.$apply();\n      }\n    }\n\n    function roomCreated(roomName) {\n      vm.data.rooms.push(roomName);\n      $scope.$apply();\n    }\n  }\n})();","(function(){angular.module(\"angular-chat\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"lobby.html\",\"<div>\\n    <h1>Lobby {{vm.data.user}}</h1>\\n\\n    <ul>\\n        <li ng-repeat=\\\"user in vm.data.users\\\">\\n            {{user}}\\n        </li>\\n    </ul>\\n</div>\");}]);})();"],"sourceRoot":"/source/"}