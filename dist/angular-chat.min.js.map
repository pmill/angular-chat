{"version":3,"sources":["module.js","directives/lobby.js","services/chatroom.js","services/socket.js","templates.js"],"names":["angular","module","Directive","restrict","scope","user","templateUrl","replace","controller","Controller","controllerAs","bindToController","$scope","ChatRoomService","activate","lobby","fetchRoom","vm","data","lobbyName","connect","then","sendUserConnected","onUserConnected","userDetailsReceived","onUserDisconnected","userDisconnected","onUserDetailsReceived","onRoomCreated","roomCreated","chatWithUser","selectedRoom","disconnect","userDetails","users","id","state","loading","$apply","roomName","rooms","push","this","directive","$inject","Service","$window","SocketService","Chatroom","room","onbeforeunload","send","currentUser","subscribe","sendMessage","message","sendUserDetails","callback","on","onMessageReceived","onUserConnectedCallback","startChatWithUser","userId","createRoomChannelName","connectToRoom","userIds","sort","hashCode","join","s","split","reduce","a","b","charCodeAt","prototype","factory","$q","socketConfig","client","ScaleDrone","channelId","resolve","reject","error","close","onDisconnect","console","log","eventName","event","payload","publish","run","$templateCache","put"],"mappings":"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","file":"angular-chat.min.js","sourcesContent":["(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat', []);\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .directive('pmChatLobby', Directive);\n\n  function Directive() {\n    return {\n      restrict: 'E',\n      scope: {\n        user: '='\n      },\n      templateUrl: 'lobby.html',\n      replace: true,\n      controller: Controller,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n  }\n\n  Controller.$inject = ['$scope', 'ChatRoomService'];\n\n  function Controller($scope, ChatRoomService) {\n    var vm = this;\n\n    vm.data = {\n      lobbyName: 'public-chat-users',\n      users: {},\n      rooms: [],\n      user: vm.user,\n      selectedRoom: null\n    };\n\n    vm.state = {\n      loading: true\n    };\n\n    vm.chatWithUser = chatWithUser;\n\n    activate();\n\n    function activate() {\n      var lobby = ChatRoomService.fetchRoom(vm.data.lobbyName, vm.user);\n      lobby.connect(vm.data.lobbyName, vm.user).then(function() {\n        lobby.sendUserConnected();\n        lobby.onUserConnected(userDetailsReceived);\n        lobby.onUserDisconnected(userDisconnected);\n        lobby.onUserDetailsReceived(userDetailsReceived);\n        lobby.onRoomCreated(roomCreated);\n      });\n    }\n\n    function chatWithUser(user) {\n      if (vm.data.selectedRoom !== null) {\n        ChatRoomService.disconnect();\n      }\n    }\n\n    function userDisconnected(userDetails) {\n      delete vm.data.users[userDetails.id];\n    }\n\n    function userDetailsReceived(userDetails) {\n      if (userDetails.id !== vm.data.user.id) {\n        vm.data.users[userDetails.id] = userDetails;\n        vm.state.loading = false;\n        $scope.$apply();\n      }\n    }\n\n    function roomCreated(roomName) {\n      vm.data.rooms.push(roomName);\n      $scope.$apply();\n    }\n  }\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .factory('ChatRoomService', Service);\n\n  Service.$inject = ['$window', 'SocketService'];\n\n  function Service($window, SocketService) {\n    var Chatroom = function(roomName, userDetails) {\n      this.roomName = roomName;\n      this.currentUser = userDetails;\n    };\n\n    Chatroom.prototype.connect = connect;\n    Chatroom.prototype.disconnect = disconnect;\n    Chatroom.prototype.onRoomCreated = onRoomCreated;\n    Chatroom.prototype.onMessageReceived = onMessageReceived;\n    Chatroom.prototype.onUserDetailsReceived = onUserDetailsReceived;\n    Chatroom.prototype.onUserConnected = onUserConnected;\n    Chatroom.prototype.onUserDisconnected = onUserDisconnected;\n    Chatroom.prototype.sendMessage = sendMessage;\n    Chatroom.prototype.sendUserConnected = sendUserConnected;\n    Chatroom.prototype.sendUserDetails = sendUserDetails;\n    Chatroom.prototype.startChatWithUser = startChatWithUser;\n\n    return {\n      fetchRoom: fetchRoom,\n      startChatWithUser: startChatWithUser\n    };\n\n    function fetchRoom(roomName, userDetails) {\n      return new Chatroom(roomName, userDetails);\n    }\n\n    function connect() {\n      var room = this;\n\n      $window.onbeforeunload = function () {\n        SocketService.send(this.roomName, 'user.disconnected', this.currentUser);\n      };\n\n      return SocketService.connect().then(function() {\n        return SocketService.subscribe(room.roomName);\n      });\n    }\n\n    function disconnect() {\n      SocketService.disconnect(this.roomName, this.currentUser);\n    }\n\n    function sendMessage(message) {\n      return SocketService.send(this.roomName, 'message.received', message);\n    }\n\n    function sendUserConnected() {\n      return SocketService.send(this.roomName, 'user.connected', this.currentUser);\n    }\n\n    function sendUserDetails() {\n      return SocketService.send(this.roomName, 'user.details', this.currentUser);\n    }\n\n    function onRoomCreated(callback) {\n      return SocketService.on(this.roomName, 'room.created', this.callback);\n    }\n\n    function onMessageReceived(callback) {\n      return SocketService.on(this.roomName, 'message.received', this.callback);\n    }\n\n    function onUserConnected(callback) {\n      var room = this;\n      return SocketService.on(this.roomName, 'user.connected', onUserConnectedCallback);\n\n      function onUserConnectedCallback(userDetails) {\n        room.sendUserDetails(room.currentUser);\n        callback(userDetails)\n      }\n    }\n\n    function onUserDisconnected(callback) {\n      return SocketService.on(this.roomName, 'user.disconnected', callback);\n    }\n\n    function onUserDetailsReceived(callback) {\n      return SocketService.on(this.roomName, 'user.details', callback);\n    }\n\n    function startChatWithUser(userId) {\n      if (userId === this.currentUser.id) {\n        throw \"Can't start a chat with yourself!\";\n      }\n\n      var roomName = createRoomChannelName([this.currentUser.id, userId]);\n      connectToRoom(roomName).then(function() {\n        return SocketService.send(roomName, 'room.created', roomName);\n      });\n    }\n\n    function createRoomChannelName(userIds) {\n      userIds = userIds.sort();\n      return 'private-chat-room-' + hashCode(userIds.join('|'));\n    }\n\n    function hashCode(s){\n      return s.split(\"\").reduce(function(a,b){a=((a<<5)-a)+b.charCodeAt(0);return a&a},0);\n    }\n  }\n})();","(function() {\n  \"use strict\";\n\n  angular\n    .module('angular-chat')\n    .factory('SocketService', Service);\n\n  Service.$inject = ['$q', 'socketConfig'];\n\n  function Service($q, socketConfig) {\n    var client;\n    var rooms = {};\n\n    return {\n      connect: connect,\n      disconnect: disconnect,\n      on: on,\n      onDisconnect: onDisconnect,\n      room: room,\n      send: send,\n      subscribe: subscribe\n    };\n\n    function connect() {\n      client = new ScaleDrone(socketConfig.channelId);\n\n      return $q(function(resolve, reject) {\n        client.on('open', function (error) {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve();\n        });\n      });\n    }\n\n    function disconnect(roomName, user) {\n      send(roomName, 'user.disconnected', user);\n      client.close();\n    }\n\n    function onDisconnect() {\n      return $q(function(resolve, reject) {\n        client.on('close', function () {\n          console.log('close()');\n          resolve();\n        });\n      });\n    }\n\n    function on(roomName, eventName, callback) {\n      console.log('subscribing to event', roomName, eventName);\n      room(roomName).on('data', function (data) {\n        if (data.event == eventName) {\n          console.log('processing message', roomName, eventName, data);\n          callback(data.payload);\n        }\n      });\n    }\n\n    function send(roomName, eventName, payload) {\n      console.log('sending message', roomName, eventName, payload);\n      client.publish({\n        room: roomName,\n        message: {\n          event: eventName,\n          payload: payload\n        }\n      });\n    }\n\n    function subscribe(roomName) {\n      return $q(function(resolve, reject) {\n        rooms[roomName] = client.subscribe(roomName);\n\n        rooms[roomName].on('open', function (error) {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve();\n        });\n      });\n    }\n\n    function room(roomName) {\n      return rooms[roomName];\n    }\n  }\n})();","(function(){angular.module(\"angular-chat\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"lobby.html\",\"<div class=\\\"row\\\">\\n    <div class=\\\"col-md-4 col-xs-12\\\">\\n        <div class=\\\"panel panel-default\\\">\\n            <div class=\\\"panel-heading\\\">\\n                <h3 class=\\\"panel-title\\\"><span class=\\\"fa fa-users\\\"></span> Lobby</h3>\\n            </div>\\n\\n            <div class=\\\"list-group\\\">\\n                <button class=\\\"list-group-item\\\"\\n                        ng-repeat=\\\"u in vm.data.users\\\"\\n                        ng-if=\\\"!vm.state.loading\\\"\\n                        ng-click=\\\"vm.chatWithUser(u)\\\">\\n                    <h4 class=\\\"list-group-item-heading\\\">\\n                        <span class=\\\"fa fa-user\\\"></span> {{u.name}}\\n                    </h4>\\n                </button>\\n                <span class=\\\"list-group-item\\\" ng-if=\\\"vm.state.loading\\\">\\n                    <h4 class=\\\"list-group-item-heading\\\">\\n                        <i class=\\\"fa fa-cog fa-spin fa-fw margin-bottom\\\"></i>\\n                        loading...\\n                    </h4>\\n                </span>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div class=\\\"col-md-8\\\">\\n        <div class=\\\"panel panel-default\\\" ng-if=\\\"vm.data.selectedRoom !== null\\\">\\n            <div class=\\\"panel-heading\\\">\\n                <h3 class=\\\"panel-title\\\"><span class=\\\"fa fa-comment-o\\\"></span> Room</h3>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\");}]);})();"],"sourceRoot":"/source/"}